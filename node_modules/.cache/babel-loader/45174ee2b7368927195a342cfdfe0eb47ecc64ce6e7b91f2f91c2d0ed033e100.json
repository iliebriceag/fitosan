{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-530ad160\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"nr-product\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"status d-flex justify-content-center align-items-center\"\n}, \"7\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"a\", {\n  class: \"cart\",\n  href: \"#\"\n}, [/*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"bi bi-cart2 d-flex justify-content-center align-items-center\"\n}), /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"none\"\n}, \"Coș cumpărături\")], -1 /* HOISTED */));\nconst _hoisted_4 = [_hoisted_2, _hoisted_3];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [..._hoisted_4]);\n}","map":{"version":3,"names":["class","_createElementVNode","href","_hoisted_2","_hoisted_3","_createElementBlock","_hoisted_1","_hoisted_4"],"sources":["D:\\My Projects\\sere-prj\\src\\components\\Cart.vue"],"sourcesContent":["<template>\r\n    <div class=\"nr-product\">\r\n        <span class=\"status d-flex justify-content-center align-items-center\">7</span>\r\n        <a class=\"cart\" href=\"#\"><i class=\"bi bi-cart2 d-flex justify-content-center align-items-center\"></i><span\r\n                class=\"none\">Coș cumpărături</span></a>\r\n    </div>\r\n</template>\r\n\r\n<style scoped>\r\n.nr-product {\r\n    position: relative;\r\n}\r\n\r\n.status {\r\n    position: fixed;\r\n    bottom: 50px;\r\n    left: 240px;\r\n    z-index: 1;\r\n    padding: 5px;\r\n    width: 30px;\r\n    border-radius: 40px;\r\n    background-color: rgb(228, 7, 7);\r\n    color: white;\r\n    font-size: .8rem;\r\n}\r\n\r\n.cart {\r\n    position: fixed;\r\n    left: 125px;\r\n    color: #fff;\r\n    padding: 15px;\r\n    box-shadow: 1px 1px 5px #222;\r\n    -o-box-shadow: 1px 1px 5px #222;\r\n    -webkit-box-shadow: 1px 1px 5px #222;\r\n    -moz-box-shadow: 1px 1px 5px #222;\r\n    -ms-box-shadow: 1px 1px 5px #222;\r\n    font-weight: 300;\r\n    color: #DDD;\r\n    cursor: pointer;\r\n    border-top-left-radius: 30px;\r\n    border-top-right-radius: 30px;\r\n    bottom: 0;\r\n    background-color: #008080;\r\n    border: none;\r\n    text-decoration: none;\r\n}\r\n\r\n@media only screen and (max-width : 361px) {\r\n    .none {\r\n        display: none;\r\n    }\r\n\r\n    .cart {\r\n        height: 70px;\r\n    }\r\n\r\n    .status {\r\n        left: 155px;\r\n    }\r\n}\r\n</style>\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n     \r\n\r\n            cartItems: [],\r\n            isCartView: false,\r\n            pageTitle: \"Our Books\"\r\n        }\r\n    },\r\n    methods: {\r\n        // responsible for showing the cart page\r\n        // when View cart button is clicked\r\n        displayCartView() {\r\n            this.isCartView = true;\r\n            this.pageTitle = \"Your Cart\";\r\n        },\r\n\r\n        // responsible for showing products page\r\n        // when logo is clicked\r\n        goToHomePage() {\r\n            this.isCartView = false;\r\n            this.pageTitle = \"Our Books\";\r\n        },\r\n\r\n        getCartItems(prod) {\r\n            if (this.cartItems.length > 0) {\r\n                for (let i = 0; i < this.cartItems.length; i++) {\r\n                    if (this.cartItems[i].item.id === prod.id) {\r\n                        this.cartItems[i].quantity++;\r\n                    } else {\r\n                        this.cartItems.push({\r\n                            item: prod,\r\n                            quantity: 1\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // if the product is already in the cart,\r\n        // increase its quantity by 1\r\n        // else create a new object with the\r\n        // selected product info and push it\r\n        // into the cartItems array.\r\n        // Decrease stock quantity when item is\r\n        // added to the cart\r\n        addProdToCart(prod) {\r\n            for (let i = 0; i < this.cartItems.length; i++) {\r\n                if (this.cartItems[i].item.id === prod.id) {\r\n                    this.cartItems[i].quantity++;\r\n                    return;\r\n                }\r\n            }\r\n            this.cartItems.push({\r\n                item: prod,\r\n                quantity: 1\r\n            });\r\n\r\n            // decrease stock when product\r\n            // is added to the cart\r\n            //console.log(this.cartItems);\r\n            prod.inStock--;\r\n        },\r\n\r\n        // + button functionality in the \r\n        // cart: quantity goes up by 1,\r\n        // in stock goes down by 1 \r\n        increaseQuantity(prod) {\r\n            prod.quantity++;\r\n            prod.item.inStock--;\r\n        },\r\n\r\n        // when the quantity reaches 0, the item\r\n        // is removed from the cart\r\n        removeProdFromCart(prod) {\r\n            const prodIndex = this.cartItems.indexOf(prod);\r\n            this.cartItems.splice(prodIndex, 1);\r\n        },\r\n\r\n        // - button functionality in the cart: \r\n        // quantity is decreased by 1,\r\n        // in stock is increased by 1,\r\n        // if quantity = 0, product is removed\r\n        // from the cart\r\n        decreaseQuantity(prod) {\r\n            prod.quantity--;\r\n            prod.item.inStock++;\r\n            if (prod.quantity <= 0) {\r\n                this.removeProdFromCart(prod);\r\n            }\r\n        },\r\n\r\n        checkout() {\r\n            // remove all products from the cart\r\n            this.cartItems = [];\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        // this function keeps an eye on the quantity in \r\n        // the cart, which may vary as users add or remove\r\n        // products and calculates the total each time\r\n        calculateTotal() {\r\n            let total = 0;\r\n            for (let i = 0; i < this.cartItems.length; i++) {\r\n                total += this.cartItems[i].item.price * this.cartItems[i].quantity;\r\n            }\r\n            return total;\r\n        }\r\n    }\r\n}\r\n\r\n</script>"],"mappings":";;;EACSA,KAAK,EAAC;AAAY;gEACnBC,mBAAA,CAA8E;EAAxED,KAAK,EAAC;AAAyD,GAAC,GAAC;gEACvEC,mBAAA,CAC+C;EAD5CD,KAAK,EAAC,MAAM;EAACE,IAAI,EAAC;iBAAID,mBAAA,CAA4E;EAAzED,KAAK,EAAC;AAA8D,I,aAAKC,mBAAA,CAC1D;EAAnCD,KAAK,EAAC;AAAM,GAAC,iBAAe,E;oBAFpCG,UAA8E,EAC9EC,UAC+C,C;;uBAHnDC,mBAAA,CAIM,OAJNC,UAIM,EALV,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}